package leet330;

import java.util.HashSet;
import java.util.Set;
import java.util.TreeSet;

public class Solution {
	
	public int minPatches(int[] nums, int n) {
		Set<Long> set = new TreeSet<>();
		set.add((long) 0);
		for (int i = 0; i < nums.length; i ++) {
			Set<Long> next = new TreeSet<>();
			for (Long j: set)
				if (j + (long) nums[i] <= (long) n)
					next.add(j + (long) nums[i]);
				else
					break;
			set.addAll(next);
//			System.out.println(set.toString());
		}
		int res = 0;
		for (long i = 1; i <= (long) n; i ++) {
			if (set.contains(i))
				set.remove(i);
			else {
				Set<Long> next = new HashSet<>();
				
				for (Long j: set) {
					if (j + i <= (long) n && j >= i)
						next.add(j + i);
					if (j >= 2 * i)
						next.add(j);
				}
				set = next;
				res ++;
//				System.out.println(i);
				i = 2 * i - 1;
			}
		}
		//System.out.println(set.toString());
		return res;
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] nums = {1,1,1,1,2,2,2,3,3,3,3,3,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,10,10,10,10,11,11,11,11,12,12,12,12,12,12,12,12,13,13,13,14,14,14,14,14,14,14,15,15,15,15,15,15,16,16,16,16,16,16,16,16,17,17,17,17,17,17,18,18,18,18,18,18,19,19,19,20,20,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,23,23,23,23,24,24,24,24,24,25,25,25,25,26,26,26,26,27,27,27,27,27,27,28,28,29,29,29,29,29,29,30,30,30,30,31,31,31,31,31,31,32,32,32,32,32,32,32,32,33,33,33,33,34,34,34,34,34,34,34,35,35,35,35,35,35,36,36,37,37,38,38,38,38,39,39,39,39,40,40,40,40,40,41,41,41,41,41,41,41,42,42,42,42,42,42,43,43,43,43,43,43,43,44,44,44,44,44,44,45,45,45,45,45,46,46,46,47,47,47,47,48,48,48,48,48,48,48,49,49,49,50,50,50,50,51,52,52,52,52,52,53,53,53,53,53,53,54,54,54,54,55,55,55,55,56,56,56,56,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,59,59,59,60,60,60,60,61,61,61,61,61,61,62,62,62,62,62,62,63,63,63,63,63,64,64,65,65,65,65,66,66,66,66,66,67,67,67,67,67,68,68,68,68,68,69,69,69,69,69,69,69,70,70,70,71,71,71,71,71,72,72,72,72,72,73,73,73,73,73,73,73,74,74,74,74,74,74,74,74,75,75,75,75,75,75,75,75,76,76,76,76,77,77,77,78,78,78,78,78,79,79,79,80,80,80,80,80,80,81,81,81,81,81,81,82,82,82,82,82,82,83,83,83,83,83,83,84,84,84,85,85,85,85,85,85,86,86,86,86,86,86,87,87,87,87,87,87,88,88,88,89,89,89,90,90,90,90,90,90,90,91,92,92,92,92,93,93,93,93,93,94,94,94,94,95,95,95,95,95,96,96,96,96,96,97,97,97,97,97,97,98,98,98,98,98,98,98,99,99,99,99,99,99,99,99,99,99,100,100};
		int[] nums = {1, 2, 31, 33};
		int n = 2147483647;
		System.out.println(new SolutionII().minPatches(nums, n));
	}

}

package leet302;

import java.util.Deque;
import java.util.LinkedList;

public class Solution {

	private boolean isUnvisitedEdge(char[][] image, int x, int y) {
		if (x < 0 || x >= image.length || y < 0 || y >= image[0].length || image[x][y] != '1')
			return false;
		for (int i = -1; i <= 1; i ++) 
			for (int j = -1; j <= 1; j ++) {
				int a = x + i, b = y + j;
				if (a < 0 || a >= image.length || b < 0 || b >= image[0].length || image[a][b] == '0')
					return true;
			}
		return false;
	}
	public int minArea(char[][] image, int x, int y) {
		Deque<Integer> dq = new LinkedList<>();
		int[] child = {0, 1, 0, -1, 1, 0, -1, 0};
		int xl = image.length, xh = -1, yl = image[0].length, yh = -1;
		int x0 = x;
		for (; x >= 0; x --) {
			if (image[x][y] == '1') {
				x0 = x;
				xl = Math.min(xl, x);
				xh = Math.max(xh, x);
				yl = Math.min(yl, y);
				yh = Math.max(yh, y);
			}
		}
		System.out.printf("x: %d, y: %d %n", x, y);
		System.out.printf("xl: %d, xh: %d, yl: %d, yh: %d%n", xl, xh, yl, yh);
		x = x0;
		dq.offer(x);
		dq.offer(y);
		while (! dq.isEmpty()) {
			int i = dq.poll();
			int j = dq.poll();
			System.out.printf("(%d, %d), ", i, j);
			for (int k = 0; k < 8; k += 2) {
				int a = i + child[k], b = j + child[k + 1];
				if (this.isUnvisitedEdge(image, a, b)) {
					image[a][b] = '2';
					dq.offer(a);
					dq.offer(b);
					xl = Math.min(xl, a);
					xh = Math.max(xh, a);
					yl = Math.min(yl, b);
					yh = Math.max(yh, b);
				}
			}
		}
		return (yh - yl + 1) * (xh - xl + 1);
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		String[] images = {};	// 
		String[] images = { "01111", "01000" };
		int row = images.length;
		char[][] image = new char[row][];
		for (int i = 0; i < images.length; i ++)
			image[i] = images[i].toCharArray();
		System.out.println(new SolutionII().minArea(image, 0, 1));
	}

}

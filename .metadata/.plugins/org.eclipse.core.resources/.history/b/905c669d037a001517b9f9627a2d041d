package leet296;

public class Solution {

	public int minTotalDistance(int[][] grid) {
		if (grid.length <= 0)
			return 0;
		int[] rows = new int[grid.length], cols = new int[grid[0].length];
		int num = 0, m = 0, x = 0, y = 0;
		for (int i = 0; i < grid.length; i ++) 
			for (int j = 0; j < grid[0].length; j ++) {
				if (grid[i][j] == 1){
					rows[i] ++;
					cols[j] ++;
					num ++;
				}
			}
		m = num / 2;
		int sum = 0;
		for (x = 0; x < rows.length; x ++) {
			sum += rows[x];
			if (sum >= m)
				break;
		}
		for (y = 0, sum = 0; y < cols.length; y ++) {
			sum += cols[y];
			if (sum > m)
				break;
		}
		sum = 0;
		for (int i = 0; i < rows.length; i ++)
			sum += (i >= x ? (i - x) : (x - i)) * rows[i];
		for (int i = 0; i < cols.length; i ++)
			sum += (i >= y ? (i - y) : (y - i)) * cols[i];
		return sum;
	}	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[][] grid = { {1, 0, 0, 0, 1}, {0, 0, 0, 0, 0}, {0, 0, 1, 0 ,0} };
		System.out.println(new Solution().minTotalDistance(grid));
	}

}

package leet166;

import java.util.HashMap;
import java.util.Map;

public class Solusion {

	public String fractionToDecimal(int numerator, int denominator) {
		Map<Integer, Integer> map = new HashMap<Integer, Integer>();
		StringBuilder sb = new StringBuilder();
		int result = 0, sign = 1, count = 1;
		long longnumerator = (long) numerator;
		long longdenominator = (long) denominator;
		if(longnumerator < 0){
			sign = sign * -1;
			longnumerator *= -1;
		}
		if(longdenominator < 0){
			sign = sign * -1;
			longdenominator *= -1;
		}
		if(sign < 0)
			sb.append('-');
		if(longnumerator == 0)
			return "0";
		if(longnumerator >= longdenominator){
			result = (int) (longnumerator / longdenominator);
			longnumerator = longnumerator % longdenominator;
			if(longnumerator == 0)
				sb.append(Integer.toString(result));
			else
				sb.append(Integer.toString(result) + ".");
		}
		else{
			sb.append("0.");
		}
		while(longnumerator > 0){
			System.out.format("%d/%d\n",longnumerator, longdenominator);
			if(map.containsKey((int)longnumerator)){
				sb.insert((int)map.get(longnumerator), '(');
				sb.append(')');
				return sb.toString();
			}
			map.put((int)longnumerator, sb.length());
			longnumerator *= 10;
			
			if(longnumerator < longdenominator){
				sb.append(0);
			}
			else{
				sb.append(longnumerator/longdenominator);
				longnumerator %= longdenominator;
			}
			if(count ++ >= 1000)
				break;
		}
		return sb.toString();
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Solusion obj = new Solusion();
		int numerator = -1, denominator = Integer.MIN_VALUE;
		System.out.println(obj.fractionToDecimal(numerator, denominator));
	}
}

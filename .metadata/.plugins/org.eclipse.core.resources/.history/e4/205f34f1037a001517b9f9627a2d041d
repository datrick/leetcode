package leet296;

public class Solution {

	public int minTotalDistance(int[][] grid) {
		if (grid.length <= 0)
			return 0;
		int[] rows = new int[grid.length], cols = new int[grid[0].length];
		int num = 0, m = 0, valx = 0, valy = 0, sum = 0;
		for (int i = 0; i < grid.length; i ++) 
			for (int j = 0; j < grid[0].length; j ++)
				if (grid[i][j] == 1){
					rows[i] ++;
					valx += i + 1;
					cols[j] ++;
					valy += j + 1;
					num ++;
				}
		
		int min = valx, left = 0, right = num, tmp = valx;
		for (int i = 0; i < rows.length; i ++) {
			tmp += left - right;
			if (tmp < min)
				min = tmp;
			left += rows[i];
			right -= rows[i];
		}
		sum = min;
		tmp = valy;
		left = 0;
		right = num;
		for (int i = 0; i < cols.length; i ++) {
			tmp += left - right;
			if (tmp < min)
				min = tmp;
			left += cols[i];
			right -= cols[i];
		}
		return sum + min;
	}	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[][] grid = { {1, 0, 0, 0, 1}, {0, 0, 0, 0, 0}, {0, 0, 1, 0 ,0} };
		System.out.println(new Solution().minTotalDistance(grid));
	}

}

package leet099;

import java.util.Stack;

public class Solution {

	public void recoverTree(TreeNode root) {
		if(root == null)
			return;
		Stack<TreeNode> st = new Stack<>();
		st.push(root);
		while(st.peek().left != null)
			st.push(st.peek().left);
		TreeNode pre = st.peek(), sw1 = null, sw2 = null, tn = root;
		while(!st.isEmpty()){
			while(st.peek().left != null)
				st.push(st.peek().left);
			TreeNode tn = st.pop();
			if(sw1 == null){
				if(tn.val < pre.val){
					sw1 = pre;
				}
			}
			else{
				if(tn.val >= sw1.val){
					sw2 = pre;
					int tmp = sw2.val;
					sw2.val = sw1.val;
					sw1.val = tmp;
					return;
				}
			}
			pre = tn;
				
			while(!st.isEmpty() && tn.right == null){
				tn = st.pop();
				if(sw1 == null){
					if(tn.val < pre.val){
						sw1 = pre;
					}
				}
				else{
					if(tn.val >= sw1.val){
						sw2 = pre;
						int tmp = sw2.val;
						sw2.val = sw1.val;
						sw1.val = tmp;
						return;
					}
				}
				pre = tn;
			}
			if(tn.right != null)
				st.push(tn.right);
		}
		int tmp = tn.val;
		tn.val = sw1.val;
		sw1.val = tmp;
		return;
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		TreeNode root = new TreeNode(2);
		root.left = new TreeNode(3);
		root.right = new TreeNode(1);
		System.out.printf("root: %d, left: %d, right: %d\n", root.val, root.left.val, root.right.val);
		Solution obj = new Solution();
		obj.recoverTree(root);
		System.out.printf("root: %d, left: %d, right: %d", root.val, root.left.val, root.right.val);
	}

}
